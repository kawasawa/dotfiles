# ------------------------------------------------------------------------------
# dotfiles セットアップ Play
# ------------------------------------------------------------------------------
- name: Setup dotfiles
  hosts: localhost
  connection: local
  vars:
    repos: "{{ ansible_env.HOME }}/repos/dotfiles"
    source: "{{ repos }}/dotfiles"
  tasks:
    - name: if dotfiles exists
      stat:
        path: "{{ repos }}"
      register: repos_stat # 指定のパスの状態を取得

    - name: Clone dotfiles repo
      git:
        repo: https://github.com/kawasawa/dotfiles.git
        dest: "{{ repos }}"
        clone: yes
      when: not repos_stat.stat.exists # ディレクトリが存在しない場合のみ実行

    - name: Migrate Git config
      copy:
        src: "{{ source }}/.gitconfig"
        dest: "{{ ansible_env.HOME }}/.gitconfig"
      ignore_errors: true # 実行時のエラーを無視

    - name: if zplug exists
      stat:
        path: "{{ ansible_env.HOME }}/.zplug"
      register: zplug_stat

    - name: Install zplug
      git:
        repo: https://github.com/zplug/zplug
        dest: "{{ ansible_env.HOME }}/.zplug"
        clone: yes
      when: not zplug_stat.stat.exists

    - name: Migrate .rc files
      copy:
        src: "{{ item }}"
        dest: "{{ ansible_env.HOME }}/{{ item | basename }}"
      with_fileglob:
        - "{{ source }}/.*rc" # パターンマッチしたファイルをループ

# ------------------------------------------------------------------------------
# ソフトウェアセットアップ Play
# ------------------------------------------------------------------------------
- name: Setup Softwares
  hosts: localhost
  connection: local
  vars:
    source: "{{ ansible_env.HOME }}/repos/dotfiles/packages"
  tasks:
    - name: Install Homebrew packages
      command: brew bundle --file {{ source }}/Brewfile
      retries: 2 # Ansible の Python 起因でたまにエラーが起きるので再試行

    - name: Clean up Homebrew lock file
      file:
        path: "{{ source }}/Brewfile.lock.json"
        state: absent # absent でファイルを削除できる

# ------------------------------------------------------------------------------
# ランタイムセットアップ Play
# ------------------------------------------------------------------------------
- name: Setup Runtimes
  hosts: localhost
  connection: local
  vars:
    source: "{{ ansible_env.HOME }}/repos/dotfiles/packages"
  tasks:
    - name: Install mise packages
      shell: |
        mise trust
        mise install
      # shell は自由度が高い反面、環境依存の温床になるため推奨はしない

    - name: Create mise config directory
      file:
        path: "{{ ansible_env.HOME }}/.config/mise"
        state: directory
        mode: "0755"

    - name: Migrate mise config
      copy:
        src: "{{ source }}/mise.toml"
        dest: "{{ ansible_env.HOME }}/.config/mise/config.toml"

# ------------------------------------------------------------------------------
# VSCode セットアップ Play
# ------------------------------------------------------------------------------
- name: Setup VSCode
  hosts: localhost
  connection: local
  vars:
    source: "{{ ansible_env.HOME }}/repos/dotfiles/vscode"
    vscode_user_dir: "{{ ansible_env.HOME }}/Library/Application Support/Code/User"
  tasks:
    - name: Migrate VSCode settings
      copy:
        src: "{{ item }}"
        dest: "{{ vscode_user_dir }}/{{ item | basename | regex_replace('\\.jsonc$', '.json') }}"
      with_fileglob:
        - "{{ source }}/*.jsonc"

    - name: Remove old VSCode prompts
      file:
        path: "{{ vscode_user_dir }}/prompts"
        state: absent

    - name: Create VSCode prompts directory
      file:
        path: "{{ vscode_user_dir }}/prompts/"
        state: directory
        mode: "0755"

    - name: Migrate VSCode prompts
      copy:
        src: "{{ source }}/prompts/"
        dest: "{{ vscode_user_dir }}/prompts/"
        directory_mode: true # ディレクトリ全体をコピー

    - name: beep
      command: afplay /System/Library/Sounds/Ping.aiff
      ignore_errors: true

    # 次の処理が重いので一旦間を入れる (スキップしたければこのタイミングで)
    - name: pause
      pause:
        seconds: 10 # 指定時間の待機だけでなく、次の Task を即時実行 or この Play を中断 も可能

    - name: Install VSCode extensions
      shell: |
        code --install-extension "{{ item }}"
        sleep 0.5 # 拡張機能のインストールを連続で実施するとロックが取れずにコケるので間隔を空ける
      loop: "{{ lookup('file', ansible_env.HOME ~ '/repos/dotfiles/packages/vscode').splitlines() }}"
      register: extension_install_result
      until: extension_install_result.rc == 0
      retries: 2 # 各ループでエラーが起きた場合に再施行
      delay: 2 # リトライ時は念の為間を空ける
      ignore_errors: true # 最終的に失敗した場合も無視
